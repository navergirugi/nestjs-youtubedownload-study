# 이 워크플로우의 이름을 지정합니다. GitHub의 'Actions' 탭에 이 이름이 표시됩니다.
name: Build Application

# 이 워크플로우를 언제 실행할지 결정합니다.
on:
  # 1. main 브랜치에 코드가 푸시(push)될 때마다 자동으로 실행됩니다.
  push:
    branches: [ "winsdows-installer-check" ]
  # 2. GitHub의 'Actions' 탭에서 수동으로 이 워크플로우를 시작할 수 있게 합니다. (테스트에 매우 유용!)
  workflow_dispatch:

# 실제 수행할 작업(job)들을 정의합니다.
jobs:
  # 'build-windows'라는 이름의 작업을 정의합니다.
  build-windows:
    # 이 작업은 Microsoft가 제공하는 최신 버전의 윈도우 가상 머신에서 실행됩니다.
    runs-on: windows-latest

    # 작업이 수행할 단계(step)들을 순서대로 나열합니다.
    steps:
      # 1단계: 저장소의 코드를 가상 머신으로 가져옵니다. (체크아웃)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2단계: Node.js 환경을 설정합니다.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          # package.json 파일의 "engines" 필드를 읽어 Node.js 버전을 자동으로 설정합니다.
          node-version-file: 'package.json'
          # yarn의 캐시를 사용하여 다음 빌드부터는 의존성 설치 속도를 높입니다.
          cache: 'yarn'

      # 3단계: package.json에 명시된 모든 의존성을 설치합니다.
      - name: Install dependencies (with retry)
        uses: nick-invision/retry@v2
        with:
          max_attempts: 3
          # 재시도 작업을 위한 전체 시간 제한을 10분(600초)으로 설정합니다. (필수 항목)
          timeout_seconds: 600
          command: yarn install --frozen-lockfile

      # 4단계: Windows용 애플리케이션을 빌드합니다. (package.json의 "build:win" 스크립트 실행)
      - name: Build Windows App
        run: yarn build:win
        env:
          # electron-builder가 강제로 GitHub 릴리스를 생성하는 것을 방지
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          CI: false

      # 5단계: 빌드 결과물(설치 파일)을 '아티팩트(Artifact)'로 업로드하여 다운로드할 수 있게 만듭니다.
      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          # 다운로드 받을 때 표시될 아티팩트의 이름입니다.
          name: windows-installer
          # 업로드할 파일의 경로입니다. 'release' 폴더 안에 있는 모든 .exe 파일을 대상으로 합니다.
          path: release/*.exe

  # 'build-mac'라는 이름의 작업을 정의합니다.
  build-mac:
    # 이 작업은 Apple이 제공하는 최신 버전의 macOS 가상 머신에서 실행됩니다.
    runs-on: macos-latest

    # 작업이 수행할 단계(step)들을 순서대로 나열합니다.
    steps:
      # 1단계: 저장소의 코드를 가상 머신으로 가져옵니다. (체크아웃)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2단계: Node.js 환경을 설정합니다.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          # package.json 파일의 "engines" 필드를 읽어 Node.js 버전을 자동으로 설정합니다.
          node-version-file: 'package.json'
          cache: 'yarn'

      # 3단계: package.json에 명시된 모든 의존성을 설치합니다.
      - name: Install dependencies (with retry)
        uses: nick-invision/retry@v2
        with:
          max_attempts: 3
          # 재시도 작업을 위한 전체 시간 제한을 10분(600초)으로 설정합니다. (필수 항목)
          timeout_seconds: 600
          command: yarn install --frozen-lockfile

      # 4단계: 애플리케이션 소스 코드를 빌드합니다. (TypeScript 컴파일 및 Next.js 빌드)
      - name: Build Application Source
        run: yarn build

      # 5단계: 빌드 결과물을 확인하여 아이콘 파일 존재 여부를 검사합니다. (디버깅용)
      - name: Verify Build Output
        run: |
          echo "--- Listing contents of dist directory ---"
          ls -R dist
          echo "----------------------------------------"

      # 6단계: macOS용 애플리케이션을 패키징합니다.
      - name: Package macOS App
        run: electron-builder --mac
        env:
          # electron-builder가 강제로 GitHub 릴리스를 생성하는 것을 방지
          CI: false
          # === Apple Code Signing & Notarization ===
          # 아래 값들은 GitHub Repository의 'Settings > Secrets and variables > Actions'에 등록해야 합니다.
          # 이 설정이 있어야 "손상된 앱" 오류가 발생하지 않습니다.
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # 7단계: 빌드 결과물(설치 파일)을 '아티팩트(Artifact)'로 업로드하여 다운로드할 수 있게 만듭니다.
      - name: Upload macOS App
        uses: actions/upload-artifact@v4
        with:
          # 다운로드 받을 때 표시될 아티팩트의 이름입니다.
          name: macos-installer
          # 업로드할 파일의 경로입니다. 'release' 폴더 안에 있는 모든 .dmg 파일을 대상으로 합니다.
          path: release/*.dmg